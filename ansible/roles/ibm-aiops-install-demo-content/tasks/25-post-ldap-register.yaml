
# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Register LDAP
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************


# --------------------------------------------------------------------------------------------------------------------------------------
# Register LDAP
# --------------------------------------------------------------------------------------------------------------------------------------

- name: 🛰️  START - LDAP REGISTER
  debug: 
    msg="{{ lookup('pipe','date +%d.%m.%Y---%H:%M:%S') }}"


- name: Log
  shell: |
    export MESSAGE="Integrate IBM AIOps with LDAP"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../install_{{current_ibmaiops_feature.kind}}.log
    echo $currentDate" - "$MESSAGE  >> ../install_{{current_ibmaiops_feature.kind}}.log
  ignore_errors: true

- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ibmaiops_feature.kind}} - Integrate IBM AIOps with LDAP'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  


# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Get Cluster FQDN
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************


- name: 🚀 LDAPREGISTER - Set LDAP ADMIN Password from instance configuration
  set_fact: current_ldap_admin_password={{current_ibmaiops_feature.ldap_admin_password  | default('CHANGEME')}}
  when: global_config.global_password is undefined or global_config.global_password=="NONE"


- name: 🚀 LDAPREGISTER - Set LDAP ADMIN Password from global configuration
  set_fact: current_ldap_admin_password={{global_config.global_password}}
  when: global_config.global_password is defined and global_config.global_password!="NONE"


- name: 🟣  LDAPREGISTER -  LDAP Password {{current_ldap_admin_password}}
  debug:
    var: current_ldap_admin_password
    verbosity: 1


- name: 🚀 LDAPREGISTER - Set LDAP USERS Password from instance configuration
  set_fact: current_ldap_user_password={{current_ibmaiops_feature.ldap_user_password  | default('CHANGEME')}}
  when: global_config.global_password is undefined or global_config.global_password=="NONE"


- name: 🚀 LDAPREGISTER - Set LDAP USERS Password from global configuration
  set_fact: current_ldap_user_password={{global_config.global_password}}
  when: global_config.global_password is defined and global_config.global_password!="NONE"


- name: 🟣  LDAPREGISTER -  LDAP Password {{current_ldap_user_password}}
  debug:
    var: current_ldap_user_password
    verbosity: 1



- name: Log
  shell: |
    export MESSAGE="   Register OpenLDAP Server"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo $currentDate" - "$MESSAGE  >> ../install_{{current_ibmaiops_feature.kind}}.log
  ignore_errors: true

- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ibmaiops_feature.kind}} - Register OpenLDAP Server'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  





- name: 🚀 LDAPREGISTER - Create LDAP Integration
  shell: |
    set -x
    
    echo "       🛠️   Getting Access Token"

    export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
    echo "       🛠️   Get Route"
    export ROUTE=$(oc get route -n $AIOPS_NAMESPACE cp-console  -o jsonpath={.spec.host})          
    echo "        Route: $ROUTE"
    echo ""
    export CPADMIN_PWD=$(oc -n $AIOPS_NAMESPACE get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_password}' | base64 -d && echo)
    export CPADMIN_USER=$(oc -n $AIOPS_NAMESPACE get secret platform-auth-idp-credentials -o jsonpath='{.data.admin_username}' | base64 -d && echo)
    export ACCESS_TOKEN=$(curl -s -k -H "Content-Type: application/x-www-form-urlencoded;charset=UTF-8" -d "grant_type=password&username=$CPADMIN_USER&password=$CPADMIN_PWD&scope=openid" https://$ROUTE/idprovider/v1/auth/identitytoken|jq -r '.access_token')
    echo "        ACCESS_TOKEN: $ACCESS_TOKEN"
    echo ""
    export LDAP_PWD_64=$(echo '{{current_ldap_user_password}}'| base64)
    echo "        LDAP_PWD_64: $LDAP_PWD_64"
    echo ""


    echo "***************************************************************************************************************************************************"
    echo "   🛠️   Create LDAP Integration"
    export result=$(curl -i -k -X POST https://$ROUTE/idprovider/v3/auth/idsource/ \
    --header "Authorization: Bearer $ACCESS_TOKEN" \
    --header "Content-Type: application/json" \
    -d '{
            "name": "LDAP",
            "description": "",
            "protocol": "ldap",
            "type": "Custom",
            "idp_config": {
                "ldap_id": "LDAP",
                "ldap_realm": "REALM",
                "ldap_url": "ldap://openldap.openldap:389",
                "ldap_host": "openldap.openldap",
                "ldap_port": "389",
                "ldap_protocol": "ldap",
                "ldap_basedn": "dc=ibm,dc=com",
                "ldap_binddn": "cn=admin,dc=ibm,dc=com",
                "ldap_bindpassword": "'$LDAP_PWD_64'",
                "ldap_type": "Custom",
                "ldap_ignorecase": "false",
                "ldap_userfilter": "(&(uid=%v)(objectclass=Person))",
                "ldap_useridmap": "*:uid",
                "ldap_groupfilter": "(&(cn=%v)(objectclass=groupOfUniqueNames))",
                "ldap_groupidmap": "*:cn",
                "ldap_groupmemberidmap": "groupOfUniqueNames:uniqueMember",
                "ldap_nestedsearch": "false",
                "ldap_pagingsearch": "false"
            }
        }')
    echo "      🔎 Result: "
    echo "       "$result | sed 's/^/          /'


    sleep 30
  ignore_errors: true
  register: REGLDAP


- name: 🟣  OUTPUT
  debug: 
    var: REGLDAP.stdout_lines
    #verbosity: 1





- name: Log
  shell: |
    export MESSAGE="   Create Users and Groups"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo $currentDate" - "$MESSAGE  >> ../install_{{current_ibmaiops_feature.kind}}.log
  ignore_errors: true

- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ibmaiops_feature.kind}} - Create Users and Groups'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  





- name: 🚀 LDAPREGISTER - CREATE IBM AIOps Groups and Users
  shell: |
    set -x
    
    export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
    echo "       🛠️   Get Route"
    export ROUTE=$(oc get route -n $AIOPS_NAMESPACE cpd  -o jsonpath={.spec.host})          
    echo "        Route: $ROUTE"
    echo ""
 
    echo "       🛠️   Getting ZEN Token"
  
    ZEN_API_HOST=$(oc get route -n $AIOPS_NAMESPACE cpd -o jsonpath='{.spec.host}')
    ZEN_LOGIN_URL="https://${ZEN_API_HOST}/v1/preauth/signin"
    LOGIN_USER=admin
    LOGIN_PASSWORD="$(oc get secret admin-user-details -n $AIOPS_NAMESPACE -o jsonpath='{ .data.initial_admin_password }' | base64 --decode)"

    ZEN_LOGIN_RESPONSE=$(
    curl -k \
    -H 'Content-Type: application/json' \
    -XPOST \
    "${ZEN_LOGIN_URL}" \
    -d '{
          "username": "'"${LOGIN_USER}"'",
          "password": "'"${LOGIN_PASSWORD}"'"
    }' 2> /dev/null
    )

    ZEN_LOGIN_MESSAGE=$(echo "${ZEN_LOGIN_RESPONSE}" | jq -r .message)

    if [ "${ZEN_LOGIN_MESSAGE}" != "success" ]; then
    echo "Login failed: ${ZEN_LOGIN_MESSAGE}" 1>&2

    exit 2
    fi

    ZEN_TOKEN=$(echo "${ZEN_LOGIN_RESPONSE}" | jq -r .token)
    echo "${ZEN_TOKEN}"

    echo "Sucessfully logged in" 1>&2

    echo ""



    echo "***************************************************************************************************************************************************"
    echo "   🛠️   Create Demo User"
    echo "     "	
    export result=$(curl -X "POST" -k "https://$ROUTE/usermgmt/v1/user" \
      -H "Authorization: bearer $ZEN_TOKEN" \
      -H 'Content-Type: application/json; charset=utf-8' \
      -d '{
    "username": "demo",
    "user_roles": ["zen_administrator_role"],
    "displayName": "demo",
    "password": "{{current_ldap_admin_password}}",
    "email": "demo@ibm.com",
    "approval_status": "approved",
    "permissions": ["administrator"],
     "misc": {
        "dark_mode": true
      }
    }')
    echo "      🔎 Result: "
    echo "       "$result|jq "._messageCode_" | sed 's/^/          /'
    echo "     "	
    echo "     "	


    echo "***************************************************************************************************************************************************"
    echo "   🛠️   Create Nik User"
    echo "     "	
    export result=$(curl -X "POST" -k "https://$ROUTE/usermgmt/v1/user" \
      -H "Authorization: bearer $ZEN_TOKEN" \
      -H 'Content-Type: application/json; charset=utf-8' \
      -d '{
    "username": "nik",
    "user_roles": ["zen_administrator_role"],
    "displayName": "nik",
    "password": "{{current_ldap_admin_password}}",
    "email": "nik@ibm.com",
    "approval_status": "approved",
    "permissions": ["administrator"],
     "misc": {
        "dark_mode": true
      }
    }')
    echo "      🔎 Result: "
    echo "       "$result|jq "._messageCode_" | sed 's/^/          /'
    echo "     "	
    echo "     "	



    echo "***************************************************************************************************************************************************"
    echo "   🛠️   Create Dev User"
    echo "     "	
    export result=$(curl -X "POST" -k "https://$ROUTE/usermgmt/v1/user" \
      -H "Authorization: bearer $ZEN_TOKEN" \
      -H 'Content-Type: application/json; charset=utf-8' \
      -d '{
    "username": "dev",
    "user_roles": ["iaf-automation-operator"],
    "displayName": "dev",
    "password": "{{current_ldap_admin_password}}",
    "email": "dev@ibm.com",
    "approval_status": "approved",
    "permissions": [],
     "misc": {
        "dark_mode": true
      }
    }')
    echo "      🔎 Result: "
    echo "       "$result|jq "._messageCode_" | sed 's/^/          /'
    echo "     "	
    echo "     "	



    echo "***************************************************************************************************************************************************"
    echo "   🛠️   Create Test User"
    echo "     "	
    export result=$(curl -X "POST" -k "https://$ROUTE/usermgmt/v1/user" \
      -H "Authorization: bearer $ZEN_TOKEN" \
      -H 'Content-Type: application/json; charset=utf-8' \
      -d '{
    "username": "test",
    "user_roles": ["iaf-automation-operator"],
    "groups": ["demo"],
    "displayName": "test",
    "password": "{{current_ldap_admin_password}}",
    "email": "test@ibm.com",
    "approval_status": "approved",
    "permissions": [],
     "misc": {
        "dark_mode": true
      }
    }')
    echo "      🔎 Result: "
    echo "       "$result|jq "._messageCode_" | sed 's/^/          /'
    echo "     "	
    echo "     "	



    echo "***************************************************************************************************************************************************"
    echo "   🛠️   Create Prod User"
    echo "     "	
    export result=$(curl -X "POST" -k "https://$ROUTE/usermgmt/v1/user" \
      -H "Authorization: bearer $ZEN_TOKEN" \
      -H 'Content-Type: application/json; charset=utf-8' \
      -d '{
    "username": "prod",
    "user_roles": ["iaf-automation-operator"],
    "displayName": "prod",
    "password": "{{current_ldap_admin_password}}",
    "email": "prod@ibm.com",
    "approval_status": "approved",
    "permissions": [
    "aiops_view_aimodels_status",
    "aiops_view_topologies",
    "aiops_view_operational_data",
    "aiops_use_insights_dashboard",
    "aiops_view_integrations",
    "aiops_view_operational_policies",
    "view_platform_health",
    "aiops_use_runbooks"
    ] ,
     "misc": {
        "dark_mode": true
      }
    }')
    echo "      🔎 Result: "
    echo "       "$result|jq "._messageCode_" | sed 's/^/          /'
    echo "     "	
    echo "     "	


    echo "***************************************************************************************************************************************************"
    echo "   🛠️   Create SRE1 User"
    echo "     "	
    export result=$(curl -X "POST" -k "https://$ROUTE/usermgmt/v1/user" \
      -H "Authorization: bearer $ZEN_TOKEN" \
      -H 'Content-Type: application/json; charset=utf-8' \
      -d '{
    "username": "sre1",
    "user_roles": ["iaf-automation-operator"],
    "displayName": "sre1",
    "password": "{{current_ldap_admin_password}}",
    "email": "sre1@ibm.com",
    "approval_status": "approved",
    "permissions": [],
     "misc": {
        "dark_mode": true
      }
    }')
    echo "      🔎 Result: "
    echo "       "$result|jq "._messageCode_" | sed 's/^/          /'
    echo "     "	
    echo "     "	


    # "user_roles": [
    #     "zen_administrator_role",
    #     "zen_service_administrator_role",
    #     "iaf-automation-admin",
    #     "iaf-automation-analyst",
    #     "iaf-automation-developer",
    #     "iaf-automation-operator",
    #     "zen_user_role"
    #   ]


  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash
    
- name: 🟣  OUTPUT
  debug: 
    var: output_string.stdout_lines
    verbosity: 1










