
# *************************************************************************************************************************************************
# --------------------------------------------------------------------------------------------------------------------------------------
# Connection Details
# --------------------------------------------------------------------------------------------------------------------------------------
# *************************************************************************************************************************************************

- name: 🛰️  START - CREATE OBSERVERS
  debug: 
    msg="{{ lookup('pipe','date +%d.%m.%Y---%H:%M:%S') }}"


- name: Log
  shell: |
    export MESSAGE="Create K8s observers"
    export currentDate=$(date +%Y-%m-%d_%H:%M)
    echo "---------------------------------------------------------------------------------------------------------------------------------------------------" >> ../install_{{current_ibmaiops_feature.kind}}.log
    echo $currentDate" - "$MESSAGE  >> ../install_{{current_ibmaiops_feature.kind}}.log
  ignore_errors: true

- name: 📣 OCP CONSOLE - Create Openshift NOTIFICATION
  shell: |
    cat <<EOF | oc apply -f -
    apiVersion: console.openshift.io/v1
    kind: ConsoleNotification
    metadata:
      name: ibm-aiops-notification
    spec:
      backgroundColor: '#ffd500'
      color: '#000'
      location: {{global_config.position_ocp_notifications | default("BannerTop")}}
      text: 'Installing {{current_ibmaiops_feature.kind}} - Create K8s observers'    
    EOF
  ignore_errors: true
  args:
    executable: /bin/bash
  when: global_config.create_ocp_notifications | default(true) == true  



# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
# K8s OBSERVER ROBOT SHOP
# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 🚀 TOPOLOGY - CREATE K8S OBSERVER ROBOT SHOP
  shell: |
    set -x

    export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
    echo "Creating K8s Observer"


    # Create Route
    oc create route passthrough aiops-topology-kubernetes-observer -n $AIOPS_NAMESPACE --insecure-policy="Redirect" --service=aiops-topology-kubernetes-observer --port=https-kubernetes-observer-api

    # Get Credentials
    export TOPO_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
    export TOPO_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
    export LOGIN="$TOPO_REST_USR:$TOPO_REST_PWD"

    export TOPO_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-kubernetes-observer -o jsonpath={.spec.host})

    echo "  URL: $TOPO_ROUTE"
    echo "  LOGIN: $LOGIN"

    echo "Getting local K8s API"

    API_TOKEN=$(oc -n default get secret $(oc get secret -n default |grep -m1 demo-admin-token|awk '{print$1}') -o jsonpath='{.data.token}'|base64 --decode)
    API_URL=$(oc status|grep -m1 "In project"|awk '{print$6}')
    API_SERVER=$(echo $API_URL| cut -d ":" -f 2| tr -d '/')
    API_PORT=$(echo $API_URL| cut -d ":" -f 3)

    echo "            🌏 API URL:               $API_URL"
    echo "            🌏 API SERVER:            $API_SERVER"
    echo "            🌏 API PORT:              $API_PORT"
    echo "            🔐 API Token:             $API_TOKEN"

    echo ""
    echo "Creating OBSERVER"


    curl -k -X POST "$TOPO_ROUTE/1.0/kubernetes-observer/jobs/load" --header 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' --header 'Accept: application/json' -u $LOGIN --header "Content-Type: application/json" \
      -d "{
        \"unique_id\": \"demo-robot-shop\",
        \"type\": \"load\",
        \"description\": \"Automatically created by Nicks scripts\",
        \"parameters\": {
          \"data_center\": \"robot-shop\",
          \"master_ip\": \"$API_SERVER\",
          \"api_port\": \"$API_PORT\",
          \"token\": {
            \"hiddenString\": \"$API_TOKEN\",
            \"encrypted\": false
          },
          \"trust_all_certificate\": true,
          \"hide_terminated_pods\": false,
          \"connect_read_timeout_ms\": 5000,
          \"custom_resource_definitions\": [
            \"string\"
          ],
          \"role_token\": false,
          \"namespace\": \"robot-shop\",
          \"namespaceGroupParameters\": {
            \"correlate\": true
          }
        },
        \"schedule\": {
            \"interval\": null,
            \"units\": null,
            \"nextRunTime\": null
          },
        \"write_file_observer_file\": false,
        \"scheduleRequest\": true
      }"


  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash


- name: 🟣  OUTPUT
  debug: 
    var: output_string.stdout_lines
    verbosity: 2




# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
# K8s OBSERVER SOCK SHOP
# --------------------------------------------------------------------------------------------------------------------------------------
# --------------------------------------------------------------------------------------------------------------------------------------
- name: 🚀 TOPOLOGY - CREATE K8S OBSERVER SOCK SHOP
  shell: |
    set -x

    export AIOPS_NAMESPACE=$(oc get po -A|grep aiops-orchestrator-controller |awk '{print$1}')
    echo "Creating K8s Observer"


    # Create Route
    oc create route passthrough aiops-topology-kubernetes-observer -n $AIOPS_NAMESPACE --insecure-policy="Redirect" --service=aiops-topology-kubernetes-observer --port=https-kubernetes-observer-api

    # Get Credentials
    export TOPO_REST_USR=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.username}' | base64 --decode)
    export TOPO_REST_PWD=$(oc get secret aiops-topology-asm-credentials -n $AIOPS_NAMESPACE -o jsonpath='{.data.password}' | base64 --decode)
    export LOGIN="$TOPO_REST_USR:$TOPO_REST_PWD"

    export TOPO_ROUTE="https://"$(oc get route -n $AIOPS_NAMESPACE aiops-topology-kubernetes-observer -o jsonpath={.spec.host})

    echo "  URL: $TOPO_ROUTE"
    echo "  LOGIN: $LOGIN"

    echo "Getting local K8s API"

    API_TOKEN=$(oc -n default get secret $(oc get secret -n default |grep -m1 demo-admin-token|awk '{print$1}') -o jsonpath='{.data.token}'|base64 --decode)
    API_URL=$(oc status|grep -m1 "In project"|awk '{print$6}')
    API_SERVER=$(echo $API_URL| cut -d ":" -f 2| tr -d '/')
    API_PORT=$(echo $API_URL| cut -d ":" -f 3)

    echo "            🌏 API URL:               $API_URL"
    echo "            🌏 API SERVER:            $API_SERVER"
    echo "            🌏 API PORT:              $API_PORT"
    echo "            🔐 API Token:             $API_TOKEN"

    echo ""
    echo "Creating OBSERVER"


    curl -k -X POST "$TOPO_ROUTE/1.0/kubernetes-observer/jobs/load" --header 'X-TenantID: cfd95b7e-3bc7-4006-a4a8-a73a79c71255' --header 'Accept: application/json' -u $LOGIN --header "Content-Type: application/json" \
      -d "{
        \"unique_id\": \"demo-sock-shop\",
        \"type\": \"load\",
        \"description\": \"Automatically created by Nicks scripts\",
        \"parameters\": {
          \"data_center\": \"sock-shop\",
          \"master_ip\": \"$API_SERVER\",
          \"api_port\": \"$API_PORT\",
          \"token\": {
            \"hiddenString\": \"$API_TOKEN\",
            \"encrypted\": false
          },
          \"trust_all_certificate\": true,
          \"hide_terminated_pods\": false,
          \"connect_read_timeout_ms\": 5000,
          \"custom_resource_definitions\": [
            \"string\"
          ],
          \"role_token\": false,
          \"namespace\": \"sock-shop\",
          \"namespaceGroupParameters\": {
            \"correlate\": true
          }
        },
        \"schedule\": {
            \"interval\": null,
            \"units\": null,
            \"nextRunTime\": null
          },
        \"write_file_observer_file\": false,
        \"scheduleRequest\": true
      }"



  register: output_string
  ignore_errors: true
  args:
    executable: /bin/bash


- name: 🟣  OUTPUT
  debug: 
    var: output_string.stdout_lines
    verbosity: 2


